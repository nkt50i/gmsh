import streamlit as st
from PIL import Image
import base64
import subprocess
import os
import math
import gmsh
import numpy as np
import matplotlib.pyplot as plt
import multiprocessing
import plotly.graph_objects as go  # –î–ª—è 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

st.set_page_config(page_title="üõ†Ô∏è", layout="wide")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
def show_code(code, language="python"):
    st.code(code, language)

def run_gmsh(file_path):
    try:
        env = os.environ.copy()
        env["LIBGL_ALWAYS_SOFTWARE"] = "1"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
        subprocess.run(["gmsh", file_path], check=True, env=env)
        st.success("Gmsh —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
    except FileNotFoundError:
        st.error("Gmsh –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.")
    except subprocess.CalledProcessError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Gmsh: {e.returncode}")
        st.text(f"–í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏:\n{e.stderr}")

sections = {
    "–Ø–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫–∏, –ª–∏–Ω–∏–∏ –∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏": "",
    "OpenCASCADE": "",
    "–ò–º–ø–æ—Ä—Ç CAD-–º–æ–¥–µ–ª–∏": "",
    "–ó–∞–º–µ—á–∞–Ω–∏–µ":"",
}

choice = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", list(sections.keys()))

if choice == "–Ø–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫–∏, –ª–∏–Ω–∏–∏ –∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏":
    st.write("""##### –Ø–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫–∏, –ª–∏–Ω–∏–∏ –∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏""")
    st.write("""
    –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã Gmsh: —Ç–æ—á–∫–∏, –ª–∏–Ω–∏–∏, –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ –ø–µ—Ç–ª–∏ –∏ –æ–±—ä–µ–º—ã.
     - **0D -> 1D -> 2D -> 3D**
    """)
    st.subheader("–®–∞–≥ 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫")
    st.write("""###### –®–∞–≥ 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫""")

    geo_code1 = """
    // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏
    L = 1.0; // –î–ª–∏–Ω–∞ —Ä–µ–±—Ä–∞ –∫—É–±–∞
    Nx = 10; // –ß–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ X
    Ny = 10; // –ß–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ Y
    Nz = 10; // –ß–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ Z

    Point(1) = {0, 0, 0, L/Nx};
    Point(2) = {L, 0, 0, L/Nx};
    Point(3) = {L, L, 0, L/Nx};
    Point(4) = {0, L, 0, L/Nx};
    Point(5) = {0, 0, L, L/Nx};
    Point(6) = {L, 0, L, L/Nx};
    Point(7) = {L, L, L, L/Nx};
    Point(8) = {0, L, L, L/Nx};
    """
    show_code(geo_code1, "python")

    st.write("""###### –®–∞–≥ 2. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–µ–±–µ—Ä –∫—É–±–∞""")

    geo_code2 = """
    Line(1) = {1, 2};
    Line(2) = {2, 3};
    Line(3) = {3, 4};
    Line(4) = {4, 1};
    Line(5) = {5, 6};
    Line(6) = {6, 7};
    Line(7) = {7, 8};
    Line(8) = {8, 5};
    Line(9) = {1, 5};
    Line(10) = {2, 6};
    Line(11) = {3, 7};
    Line(12) = {4, 8};
    
    """
    show_code(geo_code2, "python")

    st.write("""###### –®–∞–≥ 3. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∫—É–±–∞""")

    geo_code3 = """
    // –°–æ–∑–¥–∞—ë–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
    Line Loop(13) = {1, 2, 3, 4};
    Plane Surface(14) = {13};
    Line Loop(15) = {5, 6, 7, 8};
    Plane Surface(16) = {15};
    Line Loop(17) = {1, 10, -5, -9};
    Plane Surface(18) = {17};
    Line Loop(19) = {2, 11, -6, -10};
    Plane Surface(20) = {19};
    Line Loop(21) = {3, 12, -7, -11};
    Plane Surface(22) = {21};
    Line Loop(23) = {4, 9, -8, -12};
    Plane Surface(24) = {23};

    """
    show_code(geo_code3, "python")

    st.write("""###### –®–∞–≥ 4. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—ä–µ–º–∞""")

    geo_code4 = """
    // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–º
    Surface Loop(25) = {14, 16, 18, 20, 22, 24};
    Volume(26) = {25};

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç–∫—É
    Transfinite Line {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12} = Nx+1 Using Progression 1;
    Transfinite Surface {14, 16, 18, 20, 22, 24};
    Transfinite Volume {26};
    Recombine Surface {14, 16, 18, 20, 22, 24};
    Physical Volume("Cube1") = {26};
    Color Red {Volume{26};}
    Mesh 3;
    """
    show_code(geo_code4, "python")

    geo_full_code = geo_code1 + geo_code2 + geo_code3 + geo_code4

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø—Ä–∏–º–µ—Ä–∞
    def save_example_file():
        example_file_path = './example.geo'
        with open(example_file_path, 'w') as f:
            f.write(geo_full_code)
        return example_file_path

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
    if st.button("–ü—Ä–∏–º–µ—Ä 1"):
        example_file_path = save_example_file()
        run_gmsh(example_file_path)

    st.write("""
     - –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏: —Ç—Ä—É–¥–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å —Å–ª–æ–∂–Ω—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é.
     - –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ç–æ–ø–æ–ª–æ–≥–∏–µ–π.
    """)

elif choice == "OpenCASCADE":
    st.write("""##### OpenCASCADE""")
    
    st.write("""
    –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É–ø—Ä–æ—â–∞–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –≥–µ–æ–º–µ—Ç—Ä–∏–π –∑–∞ —Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤.
    """)
    geo_code5 = """
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫—É–±–æ–≤
    L = 1.0; // –î–ª–∏–Ω–∞ —Ä–µ–±—Ä–∞ –∫—É–±–∞
    Nx = 10; // –ß–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ X
    Ny = 10; // –ß–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ Y
    Nz = 10; // –ß–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ Z

    // –ü–µ—Ä–≤—ã–π –∫—É–± (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–ø–æ—Å–æ–±)
    Point(1) = {0, 0, 0, L/Nx};
    Point(2) = {L, 0, 0, L/Nx};
    Point(3) = {L, L, 0, L/Nx};
    Point(4) = {0, L, 0, L/Nx};
    Point(5) = {0, 0, L, L/Nx};
    Point(6) = {L, 0, L, L/Nx};
    Point(7) = {L, L, L, L/Nx};
    Point(8) = {0, L, L, L/Nx};

    Line(1) = {1, 2};
    Line(2) = {2, 3};
    Line(3) = {3, 4};
    Line(4) = {4, 1};
    Line(5) = {5, 6};
    Line(6) = {6, 7};
    Line(7) = {7, 8};
    Line(8) = {8, 5};
    Line(9) = {1, 5};
    Line(10) = {2, 6};
    Line(11) = {3, 7};
    Line(12) = {4, 8};

    Line Loop(13) = {1, 2, 3, 4};
    Plane Surface(14) = {13};
    Line Loop(15) = {5, 6, 7, 8};
    Plane Surface(16) = {15};
    Line Loop(17) = {1, 10, -5, -9};
    Plane Surface(18) = {17};
    Line Loop(19) = {2, 11, -6, -10};
    Plane Surface(20) = {19};
    Line Loop(21) = {3, 12, -7, -11};
    Plane Surface(22) = {21};
    Line Loop(23) = {4, 9, -8, -12};
    Plane Surface(24) = {23};

    Surface Loop(25) = {14, 16, 18, 20, 22, 24};
    Volume(26) = {25};

    Physical Volume("Cube1") = {26};
    Color Red {Volume{26};}

    // –í—Ç–æ—Ä–æ–π –∫—É–± (—á–µ—Ä–µ–∑ OpenCASCADE)
    SetFactory("OpenCASCADE");
    Box(27) = {L + 0.5, 0, 0, L, L, L};
    Physical Volume("Cube2") = {27};
    Color Blue {Volume{27};}

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç–∫—É
    Transfinite Line {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12} = Nx+1 Using Progression 1;
    Transfinite Surface {14, 16, 18, 20, 22, 24};
    Transfinite Volume {26};
    Recombine Surface {14, 16, 18, 20, 22, 24};
    Mesh 3;
    """
    show_code(geo_code5, "python")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø—Ä–∏–º–µ—Ä–∞
    def save_example_file():
        example_file_path = './example.geo'
        with open(example_file_path, 'w') as f:
            f.write(geo_code5)
        return example_file_path

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
    if st.button("–ü—Ä–∏–º–µ—Ä 2"):
        example_file_path = save_example_file()
        run_gmsh(example_file_path)

    st.write("""
     - –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –º–µ–Ω—å—à–µ –∫–æ–¥–∞, —É–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π.
     - –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏: –º–µ–Ω—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –≥—Ä–∞–Ω—è–º–∏.
    """)

elif choice == "–ò–º–ø–æ—Ä—Ç CAD-–º–æ–¥–µ–ª–∏":

    st.write("""##### –ò–º–ø–æ—Ä—Ç CAD-–º–æ–¥–µ–ª–∏""")
    st.write("""
    –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è CAD-–º–æ–¥–µ–ª—å —Ü–∏–ª–∏–Ω–¥—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ–æ—Ä–º–∞—Ç–µ STEP, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É.
    """)

    geo_code6 = """
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CAD-–º–æ–¥–µ–ª—å
    Merge "cylinder.step";

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏
    MeshSize {1} = 0.2;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä–µ–º–Ω—É—é —Å–µ—Ç–∫—É
    Mesh 3;
    """
    show_code(geo_code6, "python")

    st.write("""
     - –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º (SolidWorks, FreeCAD).
     - –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏: –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –≤ Gmsh.
    """)

elif choice == "–ó–∞–º–µ—á–∞–Ω–∏–µ":
    st.write("""##### –ó–∞–º–µ—á–∞–Ω–∏–µ""")

    st.write("""
     - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ —Ç–æ–Ω–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è.
     - OpenCASCADE ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á.
     - –ò–º–ø–æ—Ä—Ç CAD —Ö–æ—Ä–æ—à, –µ—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –º–æ–¥–µ–ª—å.
    """)