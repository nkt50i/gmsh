import streamlit as st
from PIL import Image
import base64
import subprocess
import os
import math
import gmsh
import numpy as np
import matplotlib.pyplot as plt
import multiprocessing
import plotly.graph_objects as go  # –î–ª—è 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
st.set_page_config(page_title="üóì", layout="wide")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
def show_code(code, language="python"):
    st.code(code, language)

def run_gmsh(file_path):
    try:
        env = os.environ.copy()
        env["LIBGL_ALWAYS_SOFTWARE"] = "1"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
        subprocess.run(["gmsh", file_path], check=True, env=env)
        st.success("Gmsh —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
    except FileNotFoundError:
        st.error("Gmsh –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.")
    except subprocess.CalledProcessError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Gmsh: {e.returncode}")
        st.text(f"–í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏:\n{e.stderr}")

sections = {
    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã": "",
    "–ü—Ä–∏–º–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–µ—Ç–∫–∏ —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏": "",
    "–ó–∞–º–µ—á–∞–Ω–∏–µ": "",
}

choice = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", list(sections.keys()))
    
if choice == "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã":
    st.markdown("##### –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã")

    with st.expander("1. –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç FEniCS (XML)"):
        st.write("""
        - FEniCS –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç XML-—Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ç–æ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö.
        - –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:
            - `mesh.xml` ‚Äî —Ñ–∞–π–ª —Å–µ—Ç–∫–∏.
            - `mesh_facet_region.xml` ‚Äî —Ñ–∞–π–ª —Å –º–µ—Ç–∫–∞–º–∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
            - `mesh_physical_region.xml` ‚Äî —Ñ–∞–π–ª —Å –º–µ—Ç–∫–∞–º–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π.
        - –≠—Ç–∏ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã `dolfin-convert` –∏–ª–∏ –≤—Ä—É—á–Ω—É—é.
        """)

    with st.expander("2. –§–æ—Ä–º–∞—Ç—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —á–µ—Ä–µ–∑ dolfin-convert"):
        st.write("""
        –£—Ç–∏–ª–∏—Ç–∞ dolfin-convert –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π FEniCS.
        - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
            - **Gmsh (.msh)**
            - **MEDIT (.mesh)**
            - **Triangle (.node, .ele)**
            - **TetGen (.node, .ele)**
        """)
        st.code("dolfin-convert input_mesh.msh output_mesh.xml", language="bash")

    with st.expander("3. –§–æ—Ä–º–∞—Ç—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —á–µ—Ä–µ–∑ meshio"):
        st.write("""
        –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ `meshio` –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ—Ç–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç FEniCS.
        - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
            - **Gmsh (.msh)**
            - **VTK (.vtk, .vtu)**
            - **XDMF (.xdmf)**
            - **ABAQUS (.inp)**
            - **COMSOL (.mphtxt)**
            - **STL (.stl)**
            - **MED (.med)**
        """)
        st.code("""
        import meshio
        mesh = meshio.read("input_mesh.msh")
        meshio.write("output_mesh.xml", mesh)
        """, language="python")

    with st.expander("4. –§–æ—Ä–º–∞—Ç XDMF"):
        st.write("""
        - XDMF (eXtensible Data Model and Format) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ç–æ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö.
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–µ—Ç–æ–∫ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
        """)
        st.code("""
        from dolfin import *
        mesh = Mesh()
        with XDMFFile("mesh.xdmf") as infile:
            infile.read(mesh)
        with XDMFFile("output_mesh.xdmf") as outfile:
            outfile.write(mesh)
        """, language="python")

    with st.expander("5. –§–æ—Ä–º–∞—Ç VTK"):
        st.write("""
        - VTK (Visualization Toolkit) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
        - FEniCS –º–æ–∂–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ VTK –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ ParaView.
        """)
        st.code("""
        from dolfin import *
        mesh = UnitSquareMesh(10, 10)
        V = FunctionSpace(mesh, 'P', 1)
        u = Function(V)
        File("output.pvd") << u
        """, language="python")

    with st.expander("6. –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã"):
        st.write("""
        - **HDF5**: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–µ—Ç–æ–∫.
        - **DOLFIN HDF5**: —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ç–æ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö –≤ FEniCS.
        - **NETCDF**: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏.
        """)

    with st.expander("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
        st.write("""
        - –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å XML-—Ñ–æ—Ä–º–∞—Ç.
        - –î–ª—è –±–æ–ª—å—à–∏—Ö —Å–µ—Ç–æ–∫ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥—è—Ç XDMF –∏–ª–∏ HDF5.
        - –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ—Ç–æ–∫ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `meshio`.
        """)

elif choice == "–ü—Ä–∏–º–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–µ—Ç–∫–∏ —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏":
    st.markdown("##### –ü—Ä–∏–º–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–µ—Ç–∫–∏ —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏")
    st.write("""
    ```bash
    import meshio

    # –ß—Ç–µ–Ω–∏–µ .msh —Ñ–∞–π–ª–∞
    mesh = meshio.read("mesh_with_bc.msh")
    # –ó–∞–ø–∏—Å—å –≤ .xdmf —Ñ–æ—Ä–º–∞—Ç
    meshio.write("mesh_with_bc.xdmf", mesh)
    from fenics import *

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∫–∏
    mesh = Mesh()
    with XDMFFile("mesh_with_bc.xdmf") as infile:
        infile.read(mesh)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –º–µ—Ç–æ–∫
    boundaries = MeshFunction("size_t", mesh, mesh.topology().dim() - 1)
    with XDMFFile("mesh_with_bc_boundaries.xdmf") as infile:
        infile.read(boundaries)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    u_D = Constant(0.0)
    bc = DirichletBC(V, u_D, boundaries, 1)  # 1 ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä–∞–Ω–∏—Ü—ã

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –º–µ—Ç–æ–∫
    plot(boundaries)
    plt.title("Boundary Markers")
    plt.show()
              """)
    
elif choice == "–ó–∞–º–µ—á–∞–Ω–∏–µ":
    st.markdown("##### –ó–∞–º–µ—á–∞–Ω–∏–µ")
    st.write("""

    - –î–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–µ—Ç–∫–∏ –≤ FEniCS –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gmsh, `mshr` –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã. 
    - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç `.xml` –∏–ª–∏ `.xdmf` —Å –ø–æ–º–æ—â—å—é `meshio` –∏–ª–∏ `dolfin-convert`.
    - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç–∫—É –≤ FEniCS –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å –ø–æ–º–æ—â—å—é —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø.
              """)