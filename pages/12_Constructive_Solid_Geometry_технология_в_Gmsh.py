import streamlit as st
from PIL import Image
import base64
import subprocess
import os
import math
import gmsh
import numpy as np
import matplotlib.pyplot as plt
import multiprocessing
import plotly.graph_objects as go  # Для 3D-визуализации
st.set_page_config(page_title="╋", layout="wide")

# Функция для отображения кода с возможностью копирования
def show_code(code, language="python"):
    st.code(code, language)

def run_gmsh(file_path):
    try:
        env = os.environ.copy()
        env["LIBGL_ALWAYS_SOFTWARE"] = "1"  # Используем программный рендеринг
        subprocess.run(["gmsh", file_path], check=True, env=env)
        st.success("Gmsh успешно запущен в программном режиме!")
    except FileNotFoundError:
        st.error("Gmsh не найден. Убедитесь, что он установлен и доступен в PATH.")
    except subprocess.CalledProcessError as e:
        st.error(f"Ошибка при запуске Gmsh: {e.returncode}")
        st.text(f"Вывод ошибки:\n{e.stderr}")

sections = {
    "Constructive Solid Geometry технология в Gmsh": "",
    "Применение CSG в построении геометрии": "",
    "Пример сложной геометрии с использованием CSG": "",
    "Итоги": "",
}

choice = st.sidebar.radio("Выберите раздел", list(sections.keys()))
    

if choice == "Constructive Solid Geometry технология в Gmsh":
    st.markdown("##### Constructive Solid Geometry технология в Gmsh")
    st.write("""**Constructive Solid Geometry (CSG)** — это технология, используемая для создания сложных геометрических моделей путём комбинирования простых фигур (примитивов) с помощью **булевых операций**: **объединение (union)**, **вычитание (difference)** и **пересечение (intersection)**. В Gmsh эта технология активно применяется для построения геометрии.""")
    st.markdown("###### Пример использования CSG в Gmsh")
    st.write("""Создадим геометрию состоящую из прямоугольников с круглым отверстием внутри, используя CSG.""")
    st.write("""
    1. **Создание примитивов:**
        - Прямоугольник (Rectangle).
        - Круг (Disk)
    2. **Применение булевых операций:**
        - Используем операцию **вычитания (Difference)**, чтобы удалить круг из прямоугольника.""")
        
    st.write("""
        **Пример кода в Gmsh**:
        ```bash
        // Включаем OpenCASCADE
        SetFactory("OpenCASCADE");

        // Создание прямоугольной поверхности
        Rectangle(1) = {0, 0, 0, 2, 1, 0};

        // Создание круглого отверстия (диска)
        Disk(2) = {1, 0.5, 0, 0.25};

        // Вычитание диска из прямоугольника (удаляем исходные поверхности)
        BooleanDifference(3) = { Surface{1}; Delete; }{ Surface{2}; Delete; };

        // Контроль размера сетки (разбиение на мелкие элементы)
        Mesh.CharacteristicLengthMax = 0.05; // Максимальный размер элемента
        Mesh.CharacteristicLengthMin = 0.02; // Минимальный размер элемента

        // Улучшение качества сетки
        Mesh.Algorithm = 5;      // Алгоритм Delaunay
        Mesh.Optimize = 1;       // Включить оптимизацию
        Mesh.OptimizeNetgen = 1; // Дополнительное улучшение сетки

        // Генерация сетки
        Mesh 2;
        
    """)

    if st.button("Пример 1"):    
        run_gmsh("rectangle_geometry.geo")
            
    st.write("""
            Объяснение кода:
            1. **Rectangle(1):**
            - создает прямоугольник с координатами левого нижнего угла (0,0) и размерами 2 (по оси Х) на 1 (по оси Y).
            2. **Circle(2):**
            - создает круг с центром в точке (1, 0.5) и радиусом 0.25.
            3. **BooleanDifference(3):**
            - вычитает круг (Surface{2}) из прямоугольника (Surface{1}), создавая новую поверхность (Surface{3}).
            4. **Mesh.CharacteristicLengthMax:**
            - устанавливает максимальный размер элемента.
            5. **Mesh.CharacteristicLengthMin:**
            - устанавливает максимальный размер элемента.
            6. **Mesh.Algorithm:**
            - устанавливает алгоритм генерации сетки. В данном случае, алгоритм Делоне используется для создания треугольных элементов с целью минимизации углов, приближая их к идеальным.
            7. **Mesh.Optimize:** 
            - включает оптимизацию сетки.
            8. **Mesh.OptimizeNetgen:**
            - включает дополнительную оптимизацию для создания равномерных элементов.
            9. **Mesh 2:**
            - построение двумерной сетки.
            """)

elif choice == "Применение CSG в построении геометрии":
    
    st.markdown("##### Применение CSG в построении геометрии")
    st.write("""
            CSG особенно полезна в задачах, где требуется создание сложных форм из простых примитивов.
            Примеры применения:
            1. **Инженерные конструкции:**
                - создание деталей с отверстиями, пазами или сложными формами.
                - пример: пластина с отверстиями для крепления.
            2. **Архитектурное моделирование:**
                - построение зданий с окнами, дверьми и другими элементами.
                - пример: здание с арочными проёмами.
            3. **Биомедицинское моделирование:**
                - создание моделей органов или имплантатов.
                - пример: кость с полостью для имплантата.
            4. **Физическое моделирование:**
                - построение геометрии для задач CFD (вычислительной гидродинамики) или FEM (метода конечных элементов).
                - пример: труба с внутренними перегородками.""")
            

    st.markdown("###### Преимущества CSG:")
    st.write("""
        - **Простота:** использование простых примитивов (кубы, сферы, цилиндры) для создания сложных форм.
        - **Гибкость:** возможность комбинировать фигуры с помощью булевых операций.
        - **Точность:** точное задание геометрии, что важно для численного моделирования.
    """)

elif choice == "Пример сложной геометрии с использованием CSG":
    
    st.markdown("##### Пример сложной геометрии с использованием CSG:")
    st.write("""
    Создадим геометрию, состоящую из двух пересекающихся цилиндров (труб).

    **Код в Gmsh:**
    ```bash
    // Включаем OpenCASCADE
    SetFactory("OpenCASCADE");
    // Создание первого цилиндра
    Cylinder(1) = {0, 0, 0, 2, 0, 0, 0.5, 2*Pi};
    // Центр (0,0,0), ось (2,0,0), радиус 0.5

    // Создание второго цилиндра
    Cylinder(2) = {1, -1, 0, 0, 2, 0, 0.5, 2*Pi};
    // Центр (1,-1,0), ось (0,2,0), радиус 0.5

    // Применение булевой операции Union
    BooleanUnion(3) = { Volume{1}; Delete; }{ Volume{2}; Delete; };

    // Генерация 3D-сетки
    Mesh 3;

    """)
    
    if st.button("Пример 2"):    
        run_gmsh("complex_geometry.geo")

elif choice == "Замечание":
    st.markdown("##### Замечание")
    st.write("""
            **CSG** — это мощный инструмент для создания сложных геометрий в Gmsh. Он позволяет комбинировать простые фигуры с помощью булевых операций, что делает его незаменимым для инженерных, архитектурных и научных задач.""")